generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                String                 @id @default(uuid())
  // Auth info
  email             String                 @unique
  phone             String?                @unique
  password          String
  // Basic info
  role              Int                    @db.SmallInt
  name              String
  gender            Int                    @db.SmallInt
  imgUrl            String?
  address           String?
  dateOfBirth       DateTime?              @db.Date
  identityNumber    String
  identityImgUrls   String[]
  // Properties
  ownedProperties   Property[]
  // Live at Unit
  unit              Unit?                  @relation(fields: [unitId], references: [id])
  unitId            String?
  // Contacts
  contacts          MemberContacts[]       @relation("contact")
  contactWith       MemberContacts[]       @relation("contactWith")
  // Invoices
  invoices          Invoice[]
  payForUnits       Unit[]                 @relation(name: "payer")
  sentRequests      Request[]              @relation(name: "sender")
  receivedRequests  MemberReceiveRequest[]
  landlordContracts Contract[]             @relation(name: "landlord")
  tenantContracts   Contract[]             @relation(name: "tenant")
  sentReviews       Review[]               @relation(name: "author")
  reviews           Review[]               @relation(name: "member")
  notifications     Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberContacts {
  id            String  @id @default(uuid())
  type          Int     @db.SmallInt
  isConnected   Boolean @default(false)
  // Relations
  contact       Member  @relation("contact", fields: [contactId], references: [id])
  contactId     String
  contactWith   Member  @relation("contactWith", fields: [contactWithId], references: [id])
  contactWithId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, contactWithId])
}

model Property {
  id         String            @id @default(uuid())
  // Basic info
  name       String
  type       Int               @default(0) @db.SmallInt // 0 = Single Unit, 1 = Multiple Units
  address    String
  ward       String
  district   String
  province   String
  imgUrls    String[]
  details    String?           @db.Text
  // Relations
  ownerId    String
  owner      Member            @relation(fields: [ownerId], references: [id])
  amenities  PropertyAmenity[]
  units      Unit[]
  equipments Equipment[]
  reviews    Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, ownerId])
}

model Unit {
  id            String         @id @default(uuid())
  // Basic info
  name          String
  area          Decimal
  price         Decimal
  deposit       Decimal
  details       String?        @db.Text
  status        Int            @db.SmallInt
  imgUrls       String[]
  // Relations
  payer         Member?        @relation(name: "payer", fields: [payerId], references: [id])
  payerId       String?
  tenants       Member[]
  property      Property       @relation(fields: [propertyId], references: [id])
  propertyId    String
  invoices      Invoice[]
  contracts     Contract[]
  reviews       Review[]
  unitPriceLogs UnitPriceLog[]
  unitFeatures  UnitFeature[]
  requests      Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, propertyId])
}

model UnitPriceLog {
  id     String  @id @default(uuid())
  value  Decimal
  price  Decimal
  status Int     @db.SmallInt
  // Relations
  unit   Unit    @relation(fields: [unitId], references: [id])
  unitId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UnitFeature {
  name  String @id @unique
  units Unit[]
}

model PropertyAmenity {
  name       String     @id @unique
  properties Property[]
}

model Equipment {
  id                      String             @id @default(uuid())
  // Basic info
  name                    String
  brand                   String?
  price                   Decimal?           @default(0)
  model                   String?
  serial                  String?
  dateOfInstallation      DateTime?
  details                 String?            @db.Text
  maintainStatus          Int                @default(0) @db.SmallInt // 0 = GOOD, 1 = MAINTAINING, 2 = BAD 
  // Relations
  category                String?
  Category                EquipmentCategory? @relation(fields: [category], references: [name])
  propertyId              String?
  property                Property?          @relation(fields: [propertyId], references: [id])
  // Warranty info
  enableWarranty          Boolean            @default(false)
  warrantyExprirationDate DateTime? // If enableWarranty and is null -> Lifetime warranty
}

model EquipmentCategory {
  name      String      @id @unique
  equiments Equipment[]
}

model Invoice {
  id       String    @id @default(uuid())
  code     String    @unique
  amount   Decimal
  status   Int       @db.SmallInt
  paidAt   DateTime?
  dueDate  DateTime  @db.Date
  details  String    @db.Text
  category Int       @db.SmallInt
  // Relations
  unit     Unit      @relation(fields: [unitId], references: [id])
  unitId   String
  member   Member    @relation(fields: [memberId], references: [id])
  memberId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id              String    @id @default(uuid())
  status          Int       @db.SmallInt
  template        String
  startDate       DateTime
  endDate         DateTime
  terminationDate DateTime?
  imgUrls         String[]

  // Relations
  landlord   Member @relation(name: "landlord", fields: [landlordId], references: [id])
  landlordId String
  tenant     Member @relation(name: "tenant", fields: [tenantId], references: [id])
  tenantId   String
  unit       Unit   @relation(fields: [unitId], references: [id])
  unitId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id        String                 @id @default(uuid())
  name      String
  status    Int                    @db.SmallInt
  details   String
  category  Int                    @db.SmallInt
  // Relations
  unitId    String?
  unit      Unit?                  @relation(fields: [unitId], references: [id])
  senderId  String
  sender    Member                 @relation(name: "sender", fields: [senderId], references: [id])
  receivers MemberReceiveRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberReceiveRequest {
  memberId  String
  member    Member  @relation(fields: [memberId], references: [id])
  requestId String
  request   Request @relation(fields: [requestId], references: [id])
  status    Int     @db.SmallInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([requestId, memberId])
}

model Review {
  id         String    @id @default(uuid())
  rating     Float
  comment    String?
  // Relations
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  unit       Unit?     @relation(fields: [unitId], references: [id])
  unitId     String?
  member     Member?   @relation(name: "member", fields: [memberId], references: [id])
  memberId   String?
  author     Member    @relation(name: "author", fields: [authorId], references: [id])
  authorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String    @id @default(uuid())
  title      String
  content    String
  isRead     Boolean   @default(false)
  receiverId String
  receiver   Member    @relation(fields: [receiverId], references: [id])
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
}
