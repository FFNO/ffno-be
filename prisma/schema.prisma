generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id              String           @id @default(uuid())
  // Auth info
  email           String           @unique
  phone           String?          @unique
  password        String
  // Basic info
  name            String
  gender          Int              @db.SmallInt // 0 = Male, 1 = Female
  imgUrl          String?
  address         String?
  dateOfBirth     DateTime?        @db.Date
  identityNumber  String
  identityImgUrls String[]
  // Properties
  ownedProperties Property[]
  // Live at Unit
  unit            Unit?            @relation(fields: [unitId], references: [id])
  unitId          String?
  // Contacts
  contacts        MemberContacts[] @relation("contact")
  contactWith     MemberContacts[] @relation("contactWith")
}

model MemberContacts {
  type          Int     @db.SmallInt // 0 = tenants, 1 = service pros
  isConnected   Boolean @default(false)
  contact       Member  @relation("contact", fields: [contactId], references: [id])
  contactId     String
  contactWith   Member  @relation("contactWith", fields: [contactWithId], references: [id])
  contactWithId String

  @@id([contactId, contactWithId])
}

model Property {
  id         String            @id @default(uuid())
  // Basic info
  name       String
  type       Int               @default(0) @db.SmallInt // 0 = Single Unit, 1 = Multiple Units
  address    String
  ward       String
  district   String
  province   String
  imgUrls    String[]
  details    String?           @db.Text
  // Amenities
  amenities  PropertyAmenity[]
  // Units
  units      Unit[]
  // Equipments
  equipments Equipment[]
  // Owner
  ownerId    String?
  owner      Member?           @relation(fields: [ownerId], references: [id])
}

model Unit {
  id              String         @id @default(uuid())
  // Basic info
  name            String
  type            Int            @default(0) @db.SmallInt // 0 = Single Unit, 1 = Multiple Units
  area            Decimal
  price           Decimal
  deposit         Decimal
  details         String?        @db.Text
  maintainStatus  Int            @default(0) @db.SmallInt // 0 = GOOD, 1 = MAINTAINING, 2 = BAD 
  // Basic amenities
  beds            String
  baths           String
  parking         String
  laundry         String
  airConditioning String
  // Unit features
  unitFeatures    UnitFeature[]
  unitPriceLogs   UnitPriceLog[]
  //   Relations
  tenants         Member[]
  property        Property       @relation(fields: [propertyId], references: [id])
  propertyId      String

  @@unique([name, propertyId])
}

model UnitPriceLog {
  id            String   @id @default(uuid())
  value         Decimal
  price         Decimal
  confirmStatus Int      @default(1) @db.SmallInt // 0 = Accepted, 1 = Pending, 2 = Rejected
  unit          Unit?    @relation(fields: [unitId], references: [id])
  unitId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UnitFeature {
  name  String @id @unique
  units Unit[]
}

model PropertyAmenity {
  name       String     @id @unique
  properties Property[]
}

model Equipment {
  id                      String             @id @default(uuid())
  // Basic info
  name                    String
  brand                   String?
  price                   Decimal?           @default(0)
  model                   String?
  serial                  String?
  dateOfInstallation      DateTime?
  details                 String?            @db.Text
  maintainStatus          Int                @default(0) @db.SmallInt // 0 = GOOD, 1 = MAINTAINING, 2 = BAD 
  // Relations
  category                String?
  Category                EquipmentCategory? @relation(fields: [category], references: [name])
  propertyId              String?
  property                Property?          @relation(fields: [propertyId], references: [id])
  // Warranty info
  enableWarranty          Boolean            @default(false)
  warrantyExprirationDate DateTime? // If enableWarranty and is null -> Lifetime warranty
}

model EquipmentCategory {
  name      String      @id @unique
  equiments Equipment[]
}
